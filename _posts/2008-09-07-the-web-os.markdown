---
layout: post
status: publish
published: true
title: The Web OS
author: justin
author_login: justin
author_email: jmtulloss@gmail.com
author_url: http://
wordpress_id: 35
wordpress_url: http://justin.harmonize.fm/?p=35
categories:
- Development
tags:
- Web Standards
- Web OS
comments:
- id: 13
  author: Dave
  author_email: dave@davezor.net
  author_url: http://www.davezor.net
  date: '2008-09-08 03:54:01 -0700'
  date_gmt: '2008-09-08 08:54:01 -0700'
  content: That was an excellent post.  I don&#39;t, however, think standarding an
    interface will ever happen.  Like you said, the web&#39;s expressive power is
    really tough to move against.  The entire industry of web design runs counter
    to the idea of standardizing an interface.  Coders would love to have a standard,
    but designers would hate it.<br><br>One thought I had was the limiting factor
    of the browser.  The only thing I&#39;m aware of to combat this is Google Gears.  I
    don&#39;t have any experience with it, but I do know it aims to basically make
    the browser more powerful without compromising any of the "security" of allowing
    local storage access.  Maybe in a few years that technology will be farther along
    and we can finally make the web a dominant, usable, consistent experience for
    applications.
- id: 14
  author: justin
  author_email: jmtulloss@gmail.com
  author_url: http://justin.harmonize.fm
  date: '2008-09-08 05:32:42 -0700'
  date_gmt: '2008-09-08 10:32:42 -0700'
  content: I agree that it&#39;ll never be standard across all sites. However, I think
    that if there was a standard that most web applications followed, it would go
    a long way in not only encouraging new web apps to follow it, but to enhancing
    the overall usability of the web.<br><br>There is a divide in how the web is used.
    It is still predominantly used as a publishing platform. These guys should be
    able to do whatever they want. There&#39;s nothing that complicated going on and
    creativity is a lot more important.<br><br>Rich web applications, however, are
    a different story. Applications that are taking desktop functionality and moving
    it to the web can benefit a lot from a standardized interface. They are the ones
    that should be pushed to some published standard. Of course, they need to be convinced
    that it needs to exist in such numbers to make it seem like a standard. That&#39;s
    a tough battle.
- id: 616
  author: Check Your Google Pagerank - Website Ranking Checker
  author_email: ''
  author_url: http://www.mygooglepagerank.org
  date: '2011-06-27 10:58:42 -0700'
  date_gmt: '2011-06-27 18:58:42 -0700'
  content: |-
    <strong>Check Your Google Pagerank - Website Ranking Checker...</strong>

    Look at your Google Pr, back links, listed pages about search engine in order to find social links....
- id: 1753
  author: Piese Auto
  author_email: Demetriou@yahoo.co.uk
  author_url: http://www.autoelement.ro
  date: '2012-05-01 07:12:25 -0700'
  date_gmt: '2012-05-01 15:12:25 -0700'
  content: Which car is better, an Audi or an VW? Please pitch in and give me your
    opinion...<a href="http://www.autoelement.ro/" rel="nofollow">piese auto</a>
- id: 1981
  author: Boris
  author_email: lscott@sage-popovich.com
  author_url: http://www.facebook.com/profile.php?id=100003406006213
  date: '2012-05-21 04:14:05 -0700'
  date_gmt: '2012-05-21 12:14:05 -0700'
  content: I am a designer and deeleopvr.I think that the overlap between the two
    is inevitable, as tools for both CMS dev and design become more accessible. Undoubtedly
    they both take a great deal of work to master; but designers need to become more
    techie and deeleopvrs have to offer design.As these two disciplines merge there
    is a split happening between two others  Content and Application.Websites are
    less and less content oriented and more and more application oriented, content
    generators are becoming more specialised as application deeleopvrs and designers
    merge into one field.
- id: 2030
  author: wan
  author_email: l.skabroub@novell.dk
  author_url: http://www.facebook.com/profile.php?id=100003406011415
  date: '2012-05-22 03:02:55 -0700'
  date_gmt: '2012-05-22 11:02:55 -0700'
  content: 'Hmm, I don''t know. Video Game design is the acautl design of the game,
    from level design, game mechanics and rules, etc, a game designer makes the game
    fun (sidenote: I know many designers that were programmers first). Game development
    is, well, the complete development process of a game  from audio, programming,
    design, art.I always though it was the same for web designers/programmers/developers.Web
    Design aims for the look and functionality of a website, while Web Programming
    was the acautl coding and Web Development was the whole process of making anything
    related to the web.Either way, they''re just words.'
- id: 2090
  author: Billy
  author_email: carosauto@seznam.cz
  author_url: http://www.facebook.com/profile.php?id=100003406005891
  date: '2012-05-23 18:03:12 -0700'
  date_gmt: '2012-05-24 02:03:12 -0700'
  content: 'Nice article, algltouhh I think it''s stated all to black and white. I
    call myself a Web developer, but I do both design and the technical stuff. Design
    is just a part of the website''s development, just like the coding is. I guess,
    in my explanation, the  Web  in  Web  developer is interchangable with  Product  and  developer''
    with  creator'' (resulting in Product creator). Web developer just makes it a
    bit more specific. This way of looking at it also solves the  which is more important
    question : none, as they are both part of the greater good.'
- id: 2123
  author: Hatim
  author_email: yourname@yourdomain.com
  author_url: http://www.facebook.com/profile.php?id=100003406012420
  date: '2012-05-23 20:27:33 -0700'
  date_gmt: '2012-05-24 04:27:33 -0700'
  content: I agree with the article very much in the fact that the more that is known
    about the two fildes the better the web will perform.  I love working with web
    designers when I am developing a website to function a certain way because then
    I do not have to worry about the design and how long it is going to take me.  I
    have been a web developer for about 10 years now and I love it.
- id: 2155
  author: Dj Botez
  author_email: Schwabe480346@yahoo.co.uk
  author_url: http://www.dj-mc-nunta.ro
  date: '2012-05-24 10:24:58 -0700'
  date_gmt: '2012-05-24 18:24:58 -0700'
  content: Have a beautiful day. Enjoy this spring and express your love. <a href="http://www.dj-mc-nunta.ro/"
    rel="nofollow">DJ Nunta</a>
---
There has been <a href="http://www.techcrunch.com/2008/09/01/meet-chrome-googles-windows-killer/">some speculation</a> about Chrome being the central piece of Google's web OS. There has also been some entertaining, if not entirely constructive, <a href="http://teddziuba.com/2008/09/a-web-os-are-you-dense.html">disagreement</a>. It got me to thinking about how the web as a platform does work and how it should work before it can be a viable desktop replacement.

The web as a platform has some tremendous advantages. Software is always up to date, it's connected to your friends and family, it's consistent across machines, and there's a low barrier to entry. Users don't need to install anything, designers don't need to learn how to program, and programmers can work in fun, high level languages. Awesome.

There are a lot of problems, however. The first is the obvious one. The web was never intended to be anything besides a publishing platform, and so web applications have to push browsers to their limits to achieve the kind of functionality users are accustomed to. Even with the amazing techniques and hacks that have been developed, the experience still does not compare. Web applications cannot easily access local storage. They cannot do heavy calculations. They cannot offer the vast array of interactive components that we expect in feature laden desktop apps.

This has caused a number of good things to come about. There is an emphasis on simple applications that do one thing very well. These applications (such as those made by <a href="http://www.37signals.com/">37signals</a>, <a href="http://mail.google.com/">gmail</a>, and <a href="http://www.meebo.com/">meebo</a>), all use a bit of JavaScript to improve the experience, but keep their core functionality to a minimum. This keeps the interface responsive, and makes it easy for users to learn. There has also been a number of great JavaScript frameworks developed, many of which try to take out the painful browser discrepancies while keeping the inherent flexibilty of the web platform. JavaScript interpreters have gained a lot in the past year, and stand to improve a lot more with innovations like <a href="http://code.google.com/p/v8/">V8</a> and the sophisticated interpreters being developed by the <a href="http://webkit.org/blog/189/announcing-squirrelfish/">WebKit</a> and <a href="https://wiki.mozilla.org/JavaScript:TraceMonkey">Mozilla</a> teams.

This is all great, and bodes well for the browser having the capabilities to deliver ever more sophisticated applications over the web. However, there are some basic limitations that make it exceptionally difficult to move all applications to the web. They are mostly centered around consistency and accessibility.

Consistency is vitally important to usability on a real platform. On my Mac, every program I go into has menus in the same spot. All the buttons look the same. All the windows look the same. All the fonts are the same. All the shortcuts are the same. On my Windows box, all these things are different than my mac, but they are generally similar and they are consistent across Windows applications. This makes these applications usable as a platform.

Web applications do not offer this. Every menu is custom designed and can be placed anywhere. Buttons do not look the same. There is a mismatch on what should be a link and what should be a button. Keyboard shortcuts exist on some sites, but they are so drastically different from the ones that I'm used to and other sites that they are essentially worthless. The customized, expressive power of the web is at once its greatest strength and its greatest weakness.

Until there is a standard, web applications will be less usable than their desktop couterparts. When every application is an entirely new experience, the user cannot begin at some basic building blocks for learning a program. Without this initial state, there is a limit to how complex a program can be. It is very difficult for a web program to be more complex than what you can learn from scratch in 5 minutes, because if it is, nobody will use it. This puts a ceiling on the capabilities of web applications that will not be solved by the fastest JavaScript interpreter.

Accessibility is another issue. By accessibility, I don't mean optimizing a site for the disabled, though that's an important limitation too. I mean having a set of applications that everybody can and does use. When a person buys a Windows PC, they can boot it up and use Microsoft Mail with whatever email address they have. They kind of know how to use it since it is the same as every other email client they have ever used. There's a program for pictures, there is a browser, there is a calendar, there is a chat client, there is a music player. There is probably at least a basic word processor. All of these things are great because the user can just use whatever came with their machine.

What happens when you take away the machine defaults and give them a browser instead? First off, many users will not know where to go unless some defaults are offered. Assuming there should be defaults, how do we choose them? There is no web site that I know of that lets you work with any email address. The computer will need to figure out which site should be your email program as part of its setup process. Which word processor should be used? Which search service? Which music site? Which calendar? If the user used Flickr before switching and the browser's default photo application is PhotoBucket, will they understand that they can use Flickr? That they can change the "Photos" shortcut to point to Flickr?

The answer to the accessibility problem is easier than the answer to the consistency problem. The defaults will be chosen by whoever ships the browser, and for the sake of example we will assume that's Google. That makes Google the same as Microsoft, and that's terrifying in many ways. However glum that might be, it's not an interesting problem. We either have a dominant player or we don't.

Solving the consistency issue is interesting. Some standards have started to arise, but they vary so much they're hardly recognizable. Generally, the user name associated with the current user is in the top right of the screen, along with account settings. The top bar is usually branded and contains some broad navigation elements. Program functions are listed on the left or right side. However, any convention that has been established is loose and is only specific to a very small number of very common elements. Convention, if it's working at all, is going at such a slow pace I would call it irrelevant.

If we cannot wait for convention to solve the consistency problem, then what can we do? The answer I see is to draw up a standard. The standard would be very specific; it should specify where menus should be placed, what keyboard shortcuts should be used to do what, how dialog boxes should behave, how forms should be presented, what should be a button, etc, etc. It would be possible to create tags to enforce the specification, but I think it would be useful now if it was just the established way of writing web applications. By updating JavaScript libriaries and templating systems to support the specification, it would be as easy for the developer to support as if there were new tags made available. A developer would not need to be intimately familiar with the specification if the libraries they used to work with their web UI was.

Agreeing on a specification is another issue, and perhaps a pipe dream. There should probably be user interface experts involved in creating it, and even with that, nobody will agree. Perhaps the best solution is just for somebody (I hope not me) to draw something up and discuss it until it stabilizes a bit. In the end, a set of specific guidelines for how to design user interfaces in web pages will never be useful until the big producers of web applications and the major JS and templating libraries support it.

Will that ever happen? We'll see. However, until there's some consistency, there can never be a web OS.
